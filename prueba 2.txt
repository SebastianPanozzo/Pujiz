/*
[user]
    name = Sebas Pan
    email = 9@gmail.com
*/
git clone https://github.com/SebastianPanozzo/Pujiz.git

cd Pujiz

git add .
git commit -m "trabajo hecho en la facu"
git push

git config --global --unset credential.helper

git remote remove origin

git remote -v

extension Github Pull Request

cd Resolucion

node main.js


Una empresa de marketing digital quiere analizar el comportamiento de usuarios y sus interacciones en una red social ficticia.
Los datos provienen de la API pública JSONPlaceholder:

Usuarios: https://jsonplaceholder.typicode.com/users

Comentarios: https://jsonplaceholder.typicode.com/comments

Álbumes: https://jsonplaceholder.typicode.com/albums

Tu tarea será diseñar y programar un sistema en JavaScript que permita trabajar con esta información para obtener métricas y resolver distintos problemas de negocio.

 

Problemática
Usuarios

Se necesita poder buscar usuarios según distintos criterios (por ejemplo, por nombre de compañía o por ciudad).

Se debe detectar si existen usuarios con direcciones incompletas (faltan campos como calle, ciudad o código postal).

Analizar y reportar qué compañía tiene más usuarios asociados.

Comentarios

Cada comentario pertenece a una publicación.

Se debe poder identificar los usuarios que escriben más comentarios y generar un ranking con los primeros 5.

Detectar si existen comentarios duplicados en base al mismo email y contenido.

Encontrar los comentarios que contengan una determinada palabra clave (ejemplo: “dolor”).

Álbumes

Cada usuario puede tener varios álbumes.

Se debe poder listar los álbumes de un usuario.

Detectar cuál es el usuario con más álbumes creados.

Generar un informe que indique el promedio de álbumes por usuario.

Juego de lógica con datos combinados

Encontrar los usuarios que no tengan álbumes ni comentarios (usuarios inactivos).

Calcular la proporción de comentarios de cada usuario sobre el total de comentarios y generar un ranking porcentual.

Determinar qué ciudad concentra más comentarios en total, considerando los usuarios que pertenecen a esa ciudad.

Condiciones adicionales

El sistema debe manejar asincronía (fetch, async/await) y errores de red.

Se deben validar los datos recibidos: si falta información crítica en un usuario, comentario o álbum, debe considerarse inválido.

El proyecto debe aplicar conceptos como prototipos, closures, coerción, timers/event loop y organización modular.